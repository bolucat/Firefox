# -*- Mode: python; indent-tabs-mode: nil; tab-width: 40 -*-
# vim: set filetype=python:
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.

SPHINX_TREES["crashreporter"] = "docs"

with Files("docs/**"):
    SCHEDULES.exclusive = ["docs"]

EXPORTS += [
    "!CrashAnnotations.h",
    "nsExceptionHandler.h",
]

JAR_MANIFESTS += ["jar.mn"]

UNIFIED_SOURCES = [
    "CrashAnnotations.cpp",
    "ExtraFileParser.cpp",
    "nsExceptionHandlerUtils.cpp",
]

PREPROCESSED_IPDL_SOURCES = [
    "ipc/CrashReporterInitArgs.ipdlh",
]

include("/ipc/chromium/chromium-config.mozbuild")

FINAL_LIBRARY = "xul"

if CONFIG["MOZ_CRASHREPORTER"]:
    if CONFIG["OS_ARCH"] != "WINNT":
        USE_LIBS += [
            "breakpad_client",
        ]

    if CONFIG["OS_ARCH"] == "WINNT":
        DIRS += [
            "breakpad-windows-libxul",
            "google-breakpad/src/common",
            "google-breakpad/src/processor",
            "mozwer",
            "mozwer-rust",
        ]

    elif CONFIG["OS_ARCH"] == "Darwin":
        DIRS += [
            "breakpad-client",
            "breakpad-client/mac/crash_generation",
            "breakpad-client/mac/handler",
            "google-breakpad/src/common",
            "google-breakpad/src/common/mac",
            "google-breakpad/src/processor",
        ]

    elif CONFIG["OS_ARCH"] == "Linux":
        DIRS += [
            "breakpad-client",
            "breakpad-client/linux/",
            "google-breakpad/src/common",
            "google-breakpad/src/common/linux",
            "google-breakpad/src/processor",
        ]

        EXPORTS += [
            "linux_utils.h",
        ]

        if CONFIG["MOZ_OXIDIZED_BREAKPAD"]:
            DIRS += ["rust_minidump_writer_linux"]

    if CONFIG["OS_TARGET"] != "Android":
        DIRS += [
            "client/app",
            "networking",
        ]
    else:
        DIRS += ["minidump-analyzer/android"]

    DIRS += [
        "breakpad_wrapper",
        "crash_helper",
        "crash_helper_client",
        "crash_helper_server",
        "mozannotation_client",
    ]

    TEST_DIRS += ["test"]

    UNIFIED_SOURCES += [
        "nsExceptionHandler.cpp",
    ]

    if CONFIG["OS_ARCH"] == "Darwin":
        UNIFIED_SOURCES += [
            "mac_utils.mm",
        ]

    EXTRA_JS_MODULES += [
        "CrashReports.sys.mjs",
        "CrashSubmit.sys.mjs",
    ]

    if CONFIG["OS_TARGET"] == "Android":
        DEFINES["ANDROID_NDK_MAJOR_VERSION"] = CONFIG["ANDROID_NDK_MAJOR_VERSION"]
        DEFINES["ANDROID_NDK_MINOR_VERSION"] = CONFIG["ANDROID_NDK_MINOR_VERSION"]
        LOCAL_INCLUDES += [
            "/toolkit/crashreporter/google-breakpad/src/common/android/include",
        ]
        UNIFIED_SOURCES += [
            "bionic_missing_funcs.cpp",
        ]

    DEFINES["UNICODE"] = True
    DEFINES["_UNICODE"] = True

    if CONFIG["MOZ_PHC"]:
        DEFINES["MOZ_PHC"] = True

    LOCAL_INCLUDES += [
        "/toolkit/components/jsoncpp/include",
        "google-breakpad/src",
    ]

    USE_LIBS += [
        "jsoncpp",
    ]

    PYTHON_UNITTEST_MANIFESTS += [
        "tools/python.toml",
    ]

    include("/toolkit/crashreporter/crashreporter.mozbuild")

    if CONFIG["CC_TYPE"] in ("clang", "gcc"):
        CXXFLAGS += ["-Wno-error=stack-protector"]
else:
    UNIFIED_SOURCES += [
        "nsDummyExceptionHandler.cpp",
    ]

# Generate CrashAnnotations.h
GeneratedFile(
    "CrashAnnotations.h",
    script="generate_crash_reporter_sources.py",
    entry_point="emit_header",
)

with Files("**"):
    BUG_COMPONENT = ("Toolkit", "Crash Reporting")

diff --git a/js/src/jit-test/tests/wasm/spec/spec/align.wast.js b/js/src/jit-test/tests/wasm/spec/spec/align.wast.js
--- a/js/src/jit-test/tests/wasm/spec/spec/align.wast.js
+++ b/js/src/jit-test/tests/wasm/spec/spec/align.wast.js
@@ -1076,11 +1076,13 @@ let $24 = instantiate(`(module
   )
 )`);
 
-// ./test/core/align.wast:864
-assert_trap(() => invoke($24, `store`, [65532, -1n]), `out of bounds memory access`);
+if (!partialOobWriteMayWritePartialData()) {
+  // ./test/core/align.wast:864
+  assert_trap(() => invoke($24, `store`, [65532, -1n]), `out of bounds memory access`);
 
-// ./test/core/align.wast:866
-assert_return(() => invoke($24, `load`, [65532]), [value("i32", 0)]);
+  // ./test/core/align.wast:866
+  assert_return(() => invoke($24, `load`, [65532]), [value("i32", 0)]);
+}
 
 // ./test/core/align.wast:872
 assert_invalid(
@@ -1215,25 +1217,26 @@ assert_malformed(
   `malformed memop flags`,
 );
 
-// ./test/core/align.wast:1005
-let $25 = instantiate(`(module
-  (memory i64 1)
-  (func
-    i64.const 0
-    i32.load offset=0xFFFF_FFFF_FFFF_FFFF
-    drop
-  )
-)`);
-
-// ./test/core/align.wast:1014
-assert_invalid(
-  () => instantiate(`(module
-    (memory 1)
-    (func
-      i32.const 0
-      i32.load offset=0xFFFF_FFFF_FFFF_FFFF align=0x8000_0000_0000_0000
-      drop
-    )
-  )`),
-  `alignment must not be larger than natural`,
-);
+// Suppressed because wasm-tools cannot parse these offsets.
+// // ./test/core/align.wast:1005
+// let $25 = instantiate(`(module
+//   (memory i64 1)
+//   (func
+//     i64.const 0
+//     i32.load offset=0xFFFF_FFFF_FFFF_FFFF
+//     drop
+//   )
+// )`);
+//
+// // ./test/core/align.wast:1014
+// assert_invalid(
+//   () => instantiate(`(module
+//     (memory 1)
+//     (func
+//       i32.const 0
+//       i32.load offset=0xFFFF_FFFF_FFFF_FFFF align=0x8000_0000_0000_0000
+//       drop
+//     )
+//   )`),
+//   `alignment must not be larger than natural`,
+// );
diff --git a/js/src/jit-test/tests/wasm/spec/spec/align64.wast.js b/js/src/jit-test/tests/wasm/spec/spec/align64.wast.js
--- a/js/src/jit-test/tests/wasm/spec/spec/align64.wast.js
+++ b/js/src/jit-test/tests/wasm/spec/spec/align64.wast.js
@@ -1076,8 +1076,15 @@ let $24 = instantiate(`(module
   )
 )`);
 
-// ./test/core/align64.wast:864
-assert_trap(() => invoke($24, `store`, [65532n, -1n]), `out of bounds memory access`);
+// Bug 1737225 - do not observe the partial store caused by bug 1666747 on
+// some native platforms.
+if (!partialOobWriteMayWritePartialData()) {
+  // ./test/core/align64.wast:864
+  assert_trap(
+    () => invoke($24, `store`, [65532n, -1n]),
+    `out of bounds memory access`,
+  );
 
-// ./test/core/align64.wast:866
-assert_return(() => invoke($24, `load`, [65532n]), [value("i32", 0)]);
+  // ./test/core/align64.wast:866
+  assert_return(() => invoke($24, `load`, [65532n]), [value("i32", 0)]);
+}
diff --git a/js/src/jit-test/tests/wasm/spec/spec/i16x8_relaxed_q15mulr_s.wast.js b/js/src/jit-test/tests/wasm/spec/spec/i16x8_relaxed_q15mulr_s.wast.js
--- a/js/src/jit-test/tests/wasm/spec/spec/i16x8_relaxed_q15mulr_s.wast.js
+++ b/js/src/jit-test/tests/wasm/spec/spec/i16x8_relaxed_q15mulr_s.wast.js
@@ -1,3 +1,4 @@
+// |jit-test| --setpref=wasm_relaxed_simd=true; skip-if: !wasmRelaxedSimdEnabled()
 /* Copyright 2021 Mozilla Foundation
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
diff --git a/js/src/jit-test/tests/wasm/spec/spec/i32x4_relaxed_trunc.wast.js b/js/src/jit-test/tests/wasm/spec/spec/i32x4_relaxed_trunc.wast.js
--- a/js/src/jit-test/tests/wasm/spec/spec/i32x4_relaxed_trunc.wast.js
+++ b/js/src/jit-test/tests/wasm/spec/spec/i32x4_relaxed_trunc.wast.js
@@ -1,3 +1,4 @@
+// |jit-test| --setpref=wasm_relaxed_simd=true; skip-if: !wasmRelaxedSimdEnabled()
 /* Copyright 2021 Mozilla Foundation
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
@@ -92,6 +93,7 @@ assert_return(
     either(
       i32x4([0x0, 0x0, 0xffffff00, 0xffffffff]),
       i32x4([0x0, 0xffffffff, 0xffffff00, 0xffffffff]),
+      i32x4([0x0, 0xffffffff, 0xffffff00, 0x0]),
     ),
   ],
 );
@@ -122,6 +124,7 @@ assert_return(
     either(
       i32x4([0x0, 0x0, 0x0, 0x0]),
       i32x4([0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff]),
+      i32x4([0x80000000, 0x80000000, 0x80000000, 0x80000000]),
     ),
   ],
 );
@@ -173,6 +176,7 @@ assert_return(
     either(
       i32x4([0x0, 0xffffffff, 0x0, 0x0]),
       i32x4([0xffffffff, 0xffffffff, 0x0, 0x0]),
+      i32x4([0xfffffffe, 0x0, 0x0, 0x0]),
     ),
   ],
 );
diff --git a/js/src/jit-test/tests/wasm/spec/spec/i8x16_relaxed_swizzle.wast.js b/js/src/jit-test/tests/wasm/spec/spec/i8x16_relaxed_swizzle.wast.js
--- a/js/src/jit-test/tests/wasm/spec/spec/i8x16_relaxed_swizzle.wast.js
+++ b/js/src/jit-test/tests/wasm/spec/spec/i8x16_relaxed_swizzle.wast.js
@@ -1,3 +1,4 @@
+// |jit-test| --setpref=wasm_relaxed_simd=true; skip-if: !wasmRelaxedSimdEnabled()
 /* Copyright 2021 Mozilla Foundation
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
diff --git a/js/src/jit-test/tests/wasm/spec/spec/memory.wast.js b/js/src/jit-test/tests/wasm/spec/spec/memory.wast.js
--- a/js/src/jit-test/tests/wasm/spec/spec/memory.wast.js
+++ b/js/src/jit-test/tests/wasm/spec/spec/memory.wast.js
@@ -123,36 +123,6 @@ assert_invalid(() => instantiate(`(module (memory 0 2147483648))`), `memory size
 // ./test/core/memory.wast:72
 assert_invalid(() => instantiate(`(module (memory 0 4294967295))`), `memory size`);
 
-// ./test/core/memory.wast:77
-assert_invalid(() => instantiate(`(module (memory 0x1_0000_0000))`), `memory size`);
-
-// ./test/core/memory.wast:81
-assert_invalid(
-  () => instantiate(`(module (memory 0x1_0000_0000 0x1_0000_0000))`),
-  `memory size`,
-);
-
-// ./test/core/memory.wast:85
-assert_invalid(() => instantiate(`(module (memory 0 0x1_0000_0000))`), `memory size`);
-
-// ./test/core/memory.wast:90
-assert_invalid(
-  () => instantiate(`(module (memory (import "M" "m") 0x1_0000_0000))`),
-  `memory size`,
-);
-
-// ./test/core/memory.wast:94
-assert_invalid(
-  () => instantiate(`(module (memory (import "M" "m") 0x1_0000_0000 0x1_0000_0000))`),
-  `memory size`,
-);
-
-// ./test/core/memory.wast:98
-assert_invalid(
-  () => instantiate(`(module (memory (import "M" "m") 0 0x1_0000_0000))`),
-  `memory size`,
-);
-
 // ./test/core/memory.wast:103
 let $9 = instantiate(`(module
   (memory 1)
diff --git a/js/src/jit-test/tests/wasm/spec/spec/memory_trap.wast.js b/js/src/jit-test/tests/wasm/spec/spec/memory_trap.wast.js
--- a/js/src/jit-test/tests/wasm/spec/spec/memory_trap.wast.js
+++ b/js/src/jit-test/tests/wasm/spec/spec/memory_trap.wast.js
@@ -620,11 +620,13 @@ assert_trap(() => invoke($1, `i64.load32_u`, [-3]), `out of bounds memory access
 // ./test/core/memory_trap.wast:266
 assert_trap(() => invoke($1, `i64.load32_u`, [-4]), `out of bounds memory access`);
 
-// ./test/core/memory_trap.wast:269
-assert_return(() => invoke($1, `i64.load`, [65528]), [value("i64", 7523094288207667809n)]);
+if (!partialOobWriteMayWritePartialData()) {
+  // ./test/core/memory_trap.wast:269
+  assert_return(() => invoke($1, `i64.load`, [65528]), [value("i64", 7523094288207667809n)]);
 
-// ./test/core/memory_trap.wast:270
-assert_return(() => invoke($1, `i64.load`, [0]), [value("i64", 7523094288207667809n)]);
+  // ./test/core/memory_trap.wast:270
+  assert_return(() => invoke($1, `i64.load`, [0]), [value("i64", 7523094288207667809n)]);
+}
 
 // ./test/core/memory_trap.wast:274
 assert_return(() => invoke($1, `i64.store`, [65528, 0n]), []);
@@ -632,14 +634,18 @@ assert_return(() => invoke($1, `i64.store`, [65528, 0n]), []);
 // ./test/core/memory_trap.wast:275
 assert_trap(() => invoke($1, `i32.store`, [65533, 305419896]), `out of bounds memory access`);
 
-// ./test/core/memory_trap.wast:276
-assert_return(() => invoke($1, `i32.load`, [65532]), [value("i32", 0)]);
+if (!partialOobWriteMayWritePartialData()) {
+  // ./test/core/memory_trap.wast:276
+  assert_return(() => invoke($1, `i32.load`, [65532]), [value("i32", 0)]);
+}
 
 // ./test/core/memory_trap.wast:277
 assert_trap(() => invoke($1, `i64.store`, [65529, 1311768467294899695n]), `out of bounds memory access`);
 
-// ./test/core/memory_trap.wast:278
-assert_return(() => invoke($1, `i64.load`, [65528]), [value("i64", 0n)]);
+if (!partialOobWriteMayWritePartialData()) {
+  // ./test/core/memory_trap.wast:278
+  assert_return(() => invoke($1, `i64.load`, [65528]), [value("i64", 0n)]);
+}
 
 // ./test/core/memory_trap.wast:279
 assert_trap(
@@ -647,8 +653,10 @@ assert_trap(
   `out of bounds memory access`,
 );
 
-// ./test/core/memory_trap.wast:280
-assert_return(() => invoke($1, `f32.load`, [65532]), [value("f32", 0)]);
+if (!partialOobWriteMayWritePartialData()) {
+  // ./test/core/memory_trap.wast:280
+  assert_return(() => invoke($1, `f32.load`, [65532]), [value("f32", 0)]);
+}
 
 // ./test/core/memory_trap.wast:281
 assert_trap(
@@ -656,5 +664,7 @@ assert_trap(
   `out of bounds memory access`,
 );
 
-// ./test/core/memory_trap.wast:282
-assert_return(() => invoke($1, `f64.load`, [65528]), [value("f64", 0)]);
+if (!partialOobWriteMayWritePartialData()) {
+  // ./test/core/memory_trap.wast:282
+  assert_return(() => invoke($1, `f64.load`, [65528]), [value("f64", 0)]);
+}
diff --git a/js/src/jit-test/tests/wasm/spec/spec/memory_trap1.wast.js b/js/src/jit-test/tests/wasm/spec/spec/memory_trap1.wast.js
--- a/js/src/jit-test/tests/wasm/spec/spec/memory_trap1.wast.js
+++ b/js/src/jit-test/tests/wasm/spec/spec/memory_trap1.wast.js
@@ -562,11 +562,13 @@ assert_trap(() => invoke($0, `i64.load32_u`, [-3]), `out of bounds memory access
 // ./test/core/multi-memory/memory_trap1.wast:234
 assert_trap(() => invoke($0, `i64.load32_u`, [-4]), `out of bounds memory access`);
 
-// ./test/core/multi-memory/memory_trap1.wast:237
-assert_return(() => invoke($0, `i64.load`, [65528]), [value("i64", 7523094288207667809n)]);
+if (!partialOobWriteMayWritePartialData()) {
+  // ./test/core/multi-memory/memory_trap1.wast:237
+  assert_return(() => invoke($0, `i64.load`, [65528]), [value("i64", 7523094288207667809n)]);
 
-// ./test/core/multi-memory/memory_trap1.wast:238
-assert_return(() => invoke($0, `i64.load`, [0]), [value("i64", 7523094288207667809n)]);
+  // ./test/core/multi-memory/memory_trap1.wast:238
+  assert_return(() => invoke($0, `i64.load`, [0]), [value("i64", 7523094288207667809n)]);
+}
 
 // ./test/core/multi-memory/memory_trap1.wast:242
 assert_return(() => invoke($0, `i64.store`, [65528, 0n]), []);
@@ -574,14 +576,18 @@ assert_return(() => invoke($0, `i64.store`, [65528, 0n]), []);
 // ./test/core/multi-memory/memory_trap1.wast:243
 assert_trap(() => invoke($0, `i32.store`, [65533, 305419896]), `out of bounds memory access`);
 
-// ./test/core/multi-memory/memory_trap1.wast:244
-assert_return(() => invoke($0, `i32.load`, [65532]), [value("i32", 0)]);
+if (!partialOobWriteMayWritePartialData()) {
+  // ./test/core/multi-memory/memory_trap1.wast:244
+  assert_return(() => invoke($0, `i32.load`, [65532]), [value("i32", 0)]);
+}
 
 // ./test/core/multi-memory/memory_trap1.wast:245
 assert_trap(() => invoke($0, `i64.store`, [65529, 1311768467294899695n]), `out of bounds memory access`);
 
-// ./test/core/multi-memory/memory_trap1.wast:246
-assert_return(() => invoke($0, `i64.load`, [65528]), [value("i64", 0n)]);
+if (!partialOobWriteMayWritePartialData()) {
+  // ./test/core/multi-memory/memory_trap1.wast:246
+  assert_return(() => invoke($0, `i64.load`, [65528]), [value("i64", 0n)]);
+}
 
 // ./test/core/multi-memory/memory_trap1.wast:247
 assert_trap(
@@ -589,8 +595,10 @@ assert_trap(
   `out of bounds memory access`,
 );
 
-// ./test/core/multi-memory/memory_trap1.wast:248
-assert_return(() => invoke($0, `f32.load`, [65532]), [value("f32", 0)]);
+if (!partialOobWriteMayWritePartialData()) {
+  // ./test/core/multi-memory/memory_trap1.wast:248
+  assert_return(() => invoke($0, `f32.load`, [65532]), [value("f32", 0)]);
+}
 
 // ./test/core/multi-memory/memory_trap1.wast:249
 assert_trap(
@@ -598,5 +606,7 @@ assert_trap(
   `out of bounds memory access`,
 );
 
-// ./test/core/multi-memory/memory_trap1.wast:250
-assert_return(() => invoke($0, `f64.load`, [65528]), [value("f64", 0)]);
+if (!partialOobWriteMayWritePartialData()) {
+  // ./test/core/multi-memory/memory_trap1.wast:250
+  assert_return(() => invoke($0, `f64.load`, [65528]), [value("f64", 0)]);
+}
diff --git a/js/src/jit-test/tests/wasm/spec/spec/memory_trap64.wast.js b/js/src/jit-test/tests/wasm/spec/spec/memory_trap64.wast.js
--- a/js/src/jit-test/tests/wasm/spec/spec/memory_trap64.wast.js
+++ b/js/src/jit-test/tests/wasm/spec/spec/memory_trap64.wast.js
@@ -617,8 +617,16 @@ assert_trap(() => invoke($1, `i64.load32_u`, [-3n]), `out of bounds memory acces
 // ./test/core/memory_trap64.wast:265
 assert_trap(() => invoke($1, `i64.load32_u`, [-4n]), `out of bounds memory access`);
 
-// ./test/core/memory_trap64.wast:268
-assert_return(() => invoke($1, `i64.load`, [65528n]), [value("i64", 7523094288207667809n)]);
+// Bug 1737225 - do not observe the partial store caused by bug 1666747 on
+// some native platforms.
+if (!partialOobWriteMayWritePartialData()) {
+    // ./test/core/memory_trap64.wast:268
+    assert_return(() => invoke($1, `i64.load`, [65528n]), [
+        value("i64", 7523094288207667809n),
+    ]);
 
-// ./test/core/memory_trap64.wast:269
-assert_return(() => invoke($1, `i64.load`, [0n]), [value("i64", 7523094288207667809n)]);
+    // ./test/core/memory_trap64.wast:269
+    assert_return(() => invoke($1, `i64.load`, [0n]), [
+        value("i64", 7523094288207667809n),
+    ]);
+}
diff --git a/js/src/jit-test/tests/wasm/spec/spec/ref_null.wast.js b/js/src/jit-test/tests/wasm/spec/spec/ref_null.wast.js
--- a/js/src/jit-test/tests/wasm/spec/spec/ref_null.wast.js
+++ b/js/src/jit-test/tests/wasm/spec/spec/ref_null.wast.js
@@ -37,8 +37,9 @@ assert_return(() => invoke($0, `anyref`, []), [value('anyref', null)]);
 // ./test/core/ref_null.wast:17
 assert_return(() => invoke($0, `funcref`, []), [value('anyfunc', null)]);
 
-// ./test/core/ref_null.wast:18
-assert_return(() => invoke($0, `exnref`, []), [value('exnref', null)]);
+// exnref values are not exportable to JS
+// // ./test/core/ref_null.wast:18
+// assert_return(() => invoke($0, `exnref`, []), [value('exnref', null)]);
 
 // ./test/core/ref_null.wast:19
 assert_return(() => invoke($0, `externref`, []), [value('externref', null)]);
@@ -115,23 +116,24 @@ assert_return(() => invoke($1, `nullfuncref`, []), [value('nullfuncref', null)])
 // ./test/core/ref_null.wast:66
 assert_return(() => invoke($1, `nullfuncref`, []), [null]);
 
-// ./test/core/ref_null.wast:67
-assert_return(() => invoke($1, `exnref`, []), [value('exnref', null)]);
-
-// ./test/core/ref_null.wast:68
-assert_return(() => invoke($1, `exnref`, []), [value('nullexnref', null)]);
-
-// ./test/core/ref_null.wast:69
-assert_return(() => invoke($1, `exnref`, []), [null]);
-
-// ./test/core/ref_null.wast:70
-assert_return(() => invoke($1, `nullexnref`, []), [value('exnref', null)]);
-
-// ./test/core/ref_null.wast:71
-assert_return(() => invoke($1, `nullexnref`, []), [value('nullexnref', null)]);
-
-// ./test/core/ref_null.wast:72
-assert_return(() => invoke($1, `nullexnref`, []), [null]);
+// exnref values are not exportable to JS
+// // ./test/core/ref_null.wast:67
+// assert_return(() => invoke($1, `exnref`, []), [value('exnref', null)]);
+//
+// // ./test/core/ref_null.wast:68
+// assert_return(() => invoke($1, `exnref`, []), [value('nullexnref', null)]);
+//
+// // ./test/core/ref_null.wast:69
+// assert_return(() => invoke($1, `exnref`, []), [null]);
+//
+// // ./test/core/ref_null.wast:70
+// assert_return(() => invoke($1, `nullexnref`, []), [value('exnref', null)]);
+//
+// // ./test/core/ref_null.wast:71
+// assert_return(() => invoke($1, `nullexnref`, []), [value('nullexnref', null)]);
+//
+// // ./test/core/ref_null.wast:72
+// assert_return(() => invoke($1, `nullexnref`, []), [null]);
 
 // ./test/core/ref_null.wast:73
 assert_return(() => invoke($1, `externref`, []), [value('externref', null)]);
diff --git a/js/src/jit-test/tests/wasm/spec/spec/relaxed_dot_product.wast.js b/js/src/jit-test/tests/wasm/spec/spec/relaxed_dot_product.wast.js
--- a/js/src/jit-test/tests/wasm/spec/spec/relaxed_dot_product.wast.js
+++ b/js/src/jit-test/tests/wasm/spec/spec/relaxed_dot_product.wast.js
@@ -1,3 +1,4 @@
+// |jit-test| --setpref=wasm_relaxed_simd=true; skip-if: !wasmRelaxedSimdEnabled()
 /* Copyright 2021 Mozilla Foundation
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
diff --git a/js/src/jit-test/tests/wasm/spec/spec/relaxed_laneselect.wast.js b/js/src/jit-test/tests/wasm/spec/spec/relaxed_laneselect.wast.js
--- a/js/src/jit-test/tests/wasm/spec/spec/relaxed_laneselect.wast.js
+++ b/js/src/jit-test/tests/wasm/spec/spec/relaxed_laneselect.wast.js
@@ -1,3 +1,4 @@
+// |jit-test| --setpref=wasm_relaxed_simd=true; skip-if: !wasmRelaxedSimdEnabled()
 /* Copyright 2021 Mozilla Foundation
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
diff --git a/js/src/jit-test/tests/wasm/spec/spec/relaxed_madd_nmadd.wast.js b/js/src/jit-test/tests/wasm/spec/spec/relaxed_madd_nmadd.wast.js
--- a/js/src/jit-test/tests/wasm/spec/spec/relaxed_madd_nmadd.wast.js
+++ b/js/src/jit-test/tests/wasm/spec/spec/relaxed_madd_nmadd.wast.js
@@ -1,3 +1,4 @@
+// |jit-test| --setpref=wasm_relaxed_simd=true; skip-if: !wasmRelaxedSimdEnabled()
 /* Copyright 2021 Mozilla Foundation
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
diff --git a/js/src/jit-test/tests/wasm/spec/spec/relaxed_min_max.wast.js b/js/src/jit-test/tests/wasm/spec/spec/relaxed_min_max.wast.js
--- a/js/src/jit-test/tests/wasm/spec/spec/relaxed_min_max.wast.js
+++ b/js/src/jit-test/tests/wasm/spec/spec/relaxed_min_max.wast.js
@@ -1,3 +1,4 @@
+// |jit-test| --setpref=wasm_relaxed_simd=true; skip-if: !wasmRelaxedSimdEnabled()
 /* Copyright 2021 Mozilla Foundation
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
diff --git a/js/src/jit-test/tests/wasm/spec/spec/simd_address.wast.js b/js/src/jit-test/tests/wasm/spec/spec/simd_address.wast.js
--- a/js/src/jit-test/tests/wasm/spec/spec/simd_address.wast.js
+++ b/js/src/jit-test/tests/wasm/spec/spec/simd_address.wast.js
@@ -1,3 +1,5 @@
+// |jit-test| skip-if: !wasmSimdEnabled()
+
 /* Copyright 2021 Mozilla Foundation
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
diff --git a/js/src/jit-test/tests/wasm/spec/spec/simd_align.wast.js b/js/src/jit-test/tests/wasm/spec/spec/simd_align.wast.js
--- a/js/src/jit-test/tests/wasm/spec/spec/simd_align.wast.js
+++ b/js/src/jit-test/tests/wasm/spec/spec/simd_align.wast.js
@@ -1,3 +1,5 @@
+// |jit-test| skip-if: !wasmSimdEnabled()
+
 /* Copyright 2021 Mozilla Foundation
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
diff --git a/js/src/jit-test/tests/wasm/spec/spec/simd_bit_shift.wast.js b/js/src/jit-test/tests/wasm/spec/spec/simd_bit_shift.wast.js
--- a/js/src/jit-test/tests/wasm/spec/spec/simd_bit_shift.wast.js
+++ b/js/src/jit-test/tests/wasm/spec/spec/simd_bit_shift.wast.js
@@ -1,3 +1,5 @@
+// |jit-test| skip-if: !wasmSimdEnabled()
+
 /* Copyright 2021 Mozilla Foundation
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
diff --git a/js/src/jit-test/tests/wasm/spec/spec/simd_bitwise.wast.js b/js/src/jit-test/tests/wasm/spec/spec/simd_bitwise.wast.js
--- a/js/src/jit-test/tests/wasm/spec/spec/simd_bitwise.wast.js
+++ b/js/src/jit-test/tests/wasm/spec/spec/simd_bitwise.wast.js
@@ -1,3 +1,5 @@
+// |jit-test| skip-if: !wasmSimdEnabled()
+
 /* Copyright 2021 Mozilla Foundation
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
diff --git a/js/src/jit-test/tests/wasm/spec/spec/simd_boolean.wast.js b/js/src/jit-test/tests/wasm/spec/spec/simd_boolean.wast.js
--- a/js/src/jit-test/tests/wasm/spec/spec/simd_boolean.wast.js
+++ b/js/src/jit-test/tests/wasm/spec/spec/simd_boolean.wast.js
@@ -1,3 +1,5 @@
+// |jit-test| skip-if: !wasmSimdEnabled()
+
 /* Copyright 2021 Mozilla Foundation
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
diff --git a/js/src/jit-test/tests/wasm/spec/spec/simd_const.wast.js b/js/src/jit-test/tests/wasm/spec/spec/simd_const.wast.js
--- a/js/src/jit-test/tests/wasm/spec/spec/simd_const.wast.js
+++ b/js/src/jit-test/tests/wasm/spec/spec/simd_const.wast.js
@@ -1,3 +1,5 @@
+// |jit-test| skip-if: !wasmSimdEnabled()
+
 /* Copyright 2021 Mozilla Foundation
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
diff --git a/js/src/jit-test/tests/wasm/spec/spec/simd_conversions.wast.js b/js/src/jit-test/tests/wasm/spec/spec/simd_conversions.wast.js
--- a/js/src/jit-test/tests/wasm/spec/spec/simd_conversions.wast.js
+++ b/js/src/jit-test/tests/wasm/spec/spec/simd_conversions.wast.js
@@ -1,3 +1,5 @@
+// |jit-test| skip-if: !wasmSimdEnabled()
+
 /* Copyright 2021 Mozilla Foundation
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
diff --git a/js/src/jit-test/tests/wasm/spec/spec/simd_f32x4.wast.js b/js/src/jit-test/tests/wasm/spec/spec/simd_f32x4.wast.js
--- a/js/src/jit-test/tests/wasm/spec/spec/simd_f32x4.wast.js
+++ b/js/src/jit-test/tests/wasm/spec/spec/simd_f32x4.wast.js
@@ -1,3 +1,5 @@
+// |jit-test| skip-if: !wasmSimdEnabled()
+
 /* Copyright 2021 Mozilla Foundation
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
diff --git a/js/src/jit-test/tests/wasm/spec/spec/simd_f32x4_arith.wast.js b/js/src/jit-test/tests/wasm/spec/spec/simd_f32x4_arith.wast.js
--- a/js/src/jit-test/tests/wasm/spec/spec/simd_f32x4_arith.wast.js
+++ b/js/src/jit-test/tests/wasm/spec/spec/simd_f32x4_arith.wast.js
@@ -1,3 +1,5 @@
+// |jit-test| skip-if: !wasmSimdEnabled()
+
 /* Copyright 2021 Mozilla Foundation
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
diff --git a/js/src/jit-test/tests/wasm/spec/spec/simd_f32x4_cmp.wast.js b/js/src/jit-test/tests/wasm/spec/spec/simd_f32x4_cmp.wast.js
--- a/js/src/jit-test/tests/wasm/spec/spec/simd_f32x4_cmp.wast.js
+++ b/js/src/jit-test/tests/wasm/spec/spec/simd_f32x4_cmp.wast.js
@@ -1,3 +1,5 @@
+// |jit-test| skip-if: !wasmSimdEnabled()
+
 /* Copyright 2021 Mozilla Foundation
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
diff --git a/js/src/jit-test/tests/wasm/spec/spec/simd_f32x4_pmin_pmax.wast.js b/js/src/jit-test/tests/wasm/spec/spec/simd_f32x4_pmin_pmax.wast.js
--- a/js/src/jit-test/tests/wasm/spec/spec/simd_f32x4_pmin_pmax.wast.js
+++ b/js/src/jit-test/tests/wasm/spec/spec/simd_f32x4_pmin_pmax.wast.js
@@ -1,3 +1,5 @@
+// |jit-test| skip-if: !wasmSimdEnabled()
+
 /* Copyright 2021 Mozilla Foundation
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
diff --git a/js/src/jit-test/tests/wasm/spec/spec/simd_f32x4_rounding.wast.js b/js/src/jit-test/tests/wasm/spec/spec/simd_f32x4_rounding.wast.js
--- a/js/src/jit-test/tests/wasm/spec/spec/simd_f32x4_rounding.wast.js
+++ b/js/src/jit-test/tests/wasm/spec/spec/simd_f32x4_rounding.wast.js
@@ -1,3 +1,5 @@
+// |jit-test| skip-if: !wasmSimdEnabled()
+
 /* Copyright 2021 Mozilla Foundation
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
diff --git a/js/src/jit-test/tests/wasm/spec/spec/simd_f64x2.wast.js b/js/src/jit-test/tests/wasm/spec/spec/simd_f64x2.wast.js
--- a/js/src/jit-test/tests/wasm/spec/spec/simd_f64x2.wast.js
+++ b/js/src/jit-test/tests/wasm/spec/spec/simd_f64x2.wast.js
@@ -1,3 +1,5 @@
+// |jit-test| skip-if: !wasmSimdEnabled()
+
 /* Copyright 2021 Mozilla Foundation
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
diff --git a/js/src/jit-test/tests/wasm/spec/spec/simd_f64x2_arith.wast.js b/js/src/jit-test/tests/wasm/spec/spec/simd_f64x2_arith.wast.js
--- a/js/src/jit-test/tests/wasm/spec/spec/simd_f64x2_arith.wast.js
+++ b/js/src/jit-test/tests/wasm/spec/spec/simd_f64x2_arith.wast.js
@@ -1,3 +1,5 @@
+// |jit-test| skip-if: !wasmSimdEnabled()
+
 /* Copyright 2021 Mozilla Foundation
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
diff --git a/js/src/jit-test/tests/wasm/spec/spec/simd_f64x2_cmp.wast.js b/js/src/jit-test/tests/wasm/spec/spec/simd_f64x2_cmp.wast.js
--- a/js/src/jit-test/tests/wasm/spec/spec/simd_f64x2_cmp.wast.js
+++ b/js/src/jit-test/tests/wasm/spec/spec/simd_f64x2_cmp.wast.js
@@ -1,3 +1,5 @@
+// |jit-test| skip-if: !wasmSimdEnabled()
+
 /* Copyright 2021 Mozilla Foundation
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
diff --git a/js/src/jit-test/tests/wasm/spec/spec/simd_f64x2_pmin_pmax.wast.js b/js/src/jit-test/tests/wasm/spec/spec/simd_f64x2_pmin_pmax.wast.js
--- a/js/src/jit-test/tests/wasm/spec/spec/simd_f64x2_pmin_pmax.wast.js
+++ b/js/src/jit-test/tests/wasm/spec/spec/simd_f64x2_pmin_pmax.wast.js
@@ -1,3 +1,5 @@
+// |jit-test| skip-if: !wasmSimdEnabled()
+
 /* Copyright 2021 Mozilla Foundation
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
diff --git a/js/src/jit-test/tests/wasm/spec/spec/simd_f64x2_rounding.wast.js b/js/src/jit-test/tests/wasm/spec/spec/simd_f64x2_rounding.wast.js
--- a/js/src/jit-test/tests/wasm/spec/spec/simd_f64x2_rounding.wast.js
+++ b/js/src/jit-test/tests/wasm/spec/spec/simd_f64x2_rounding.wast.js
@@ -1,3 +1,5 @@
+// |jit-test| skip-if: !wasmSimdEnabled()
+
 /* Copyright 2021 Mozilla Foundation
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
diff --git a/js/src/jit-test/tests/wasm/spec/spec/simd_i16x8_arith.wast.js b/js/src/jit-test/tests/wasm/spec/spec/simd_i16x8_arith.wast.js
--- a/js/src/jit-test/tests/wasm/spec/spec/simd_i16x8_arith.wast.js
+++ b/js/src/jit-test/tests/wasm/spec/spec/simd_i16x8_arith.wast.js
@@ -1,3 +1,5 @@
+// |jit-test| skip-if: !wasmSimdEnabled()
+
 /* Copyright 2021 Mozilla Foundation
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
diff --git a/js/src/jit-test/tests/wasm/spec/spec/simd_i16x8_arith2.wast.js b/js/src/jit-test/tests/wasm/spec/spec/simd_i16x8_arith2.wast.js
--- a/js/src/jit-test/tests/wasm/spec/spec/simd_i16x8_arith2.wast.js
+++ b/js/src/jit-test/tests/wasm/spec/spec/simd_i16x8_arith2.wast.js
@@ -1,3 +1,5 @@
+// |jit-test| skip-if: !wasmSimdEnabled()
+
 /* Copyright 2021 Mozilla Foundation
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
diff --git a/js/src/jit-test/tests/wasm/spec/spec/simd_i16x8_cmp.wast.js b/js/src/jit-test/tests/wasm/spec/spec/simd_i16x8_cmp.wast.js
--- a/js/src/jit-test/tests/wasm/spec/spec/simd_i16x8_cmp.wast.js
+++ b/js/src/jit-test/tests/wasm/spec/spec/simd_i16x8_cmp.wast.js
@@ -1,3 +1,5 @@
+// |jit-test| skip-if: !wasmSimdEnabled()
+
 /* Copyright 2021 Mozilla Foundation
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
diff --git a/js/src/jit-test/tests/wasm/spec/spec/simd_i16x8_extadd_pairwise_i8x16.wast.js b/js/src/jit-test/tests/wasm/spec/spec/simd_i16x8_extadd_pairwise_i8x16.wast.js
--- a/js/src/jit-test/tests/wasm/spec/spec/simd_i16x8_extadd_pairwise_i8x16.wast.js
+++ b/js/src/jit-test/tests/wasm/spec/spec/simd_i16x8_extadd_pairwise_i8x16.wast.js
@@ -1,3 +1,5 @@
+// |jit-test| skip-if: !wasmSimdEnabled()
+
 /* Copyright 2021 Mozilla Foundation
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
diff --git a/js/src/jit-test/tests/wasm/spec/spec/simd_i16x8_extmul_i8x16.wast.js b/js/src/jit-test/tests/wasm/spec/spec/simd_i16x8_extmul_i8x16.wast.js
--- a/js/src/jit-test/tests/wasm/spec/spec/simd_i16x8_extmul_i8x16.wast.js
+++ b/js/src/jit-test/tests/wasm/spec/spec/simd_i16x8_extmul_i8x16.wast.js
@@ -1,3 +1,5 @@
+// |jit-test| skip-if: !wasmSimdEnabled()
+
 /* Copyright 2021 Mozilla Foundation
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
diff --git a/js/src/jit-test/tests/wasm/spec/spec/simd_i16x8_q15mulr_sat_s.wast.js b/js/src/jit-test/tests/wasm/spec/spec/simd_i16x8_q15mulr_sat_s.wast.js
--- a/js/src/jit-test/tests/wasm/spec/spec/simd_i16x8_q15mulr_sat_s.wast.js
+++ b/js/src/jit-test/tests/wasm/spec/spec/simd_i16x8_q15mulr_sat_s.wast.js
@@ -1,3 +1,5 @@
+// |jit-test| skip-if: !wasmSimdEnabled()
+
 /* Copyright 2021 Mozilla Foundation
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
diff --git a/js/src/jit-test/tests/wasm/spec/spec/simd_i16x8_sat_arith.wast.js b/js/src/jit-test/tests/wasm/spec/spec/simd_i16x8_sat_arith.wast.js
--- a/js/src/jit-test/tests/wasm/spec/spec/simd_i16x8_sat_arith.wast.js
+++ b/js/src/jit-test/tests/wasm/spec/spec/simd_i16x8_sat_arith.wast.js
@@ -1,3 +1,5 @@
+// |jit-test| skip-if: !wasmSimdEnabled()
+
 /* Copyright 2021 Mozilla Foundation
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
diff --git a/js/src/jit-test/tests/wasm/spec/spec/simd_i32x4_arith.wast.js b/js/src/jit-test/tests/wasm/spec/spec/simd_i32x4_arith.wast.js
--- a/js/src/jit-test/tests/wasm/spec/spec/simd_i32x4_arith.wast.js
+++ b/js/src/jit-test/tests/wasm/spec/spec/simd_i32x4_arith.wast.js
@@ -1,3 +1,5 @@
+// |jit-test| skip-if: !wasmSimdEnabled()
+
 /* Copyright 2021 Mozilla Foundation
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
diff --git a/js/src/jit-test/tests/wasm/spec/spec/simd_i32x4_arith2.wast.js b/js/src/jit-test/tests/wasm/spec/spec/simd_i32x4_arith2.wast.js
--- a/js/src/jit-test/tests/wasm/spec/spec/simd_i32x4_arith2.wast.js
+++ b/js/src/jit-test/tests/wasm/spec/spec/simd_i32x4_arith2.wast.js
@@ -1,3 +1,5 @@
+// |jit-test| skip-if: !wasmSimdEnabled()
+
 /* Copyright 2021 Mozilla Foundation
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
diff --git a/js/src/jit-test/tests/wasm/spec/spec/simd_i32x4_cmp.wast.js b/js/src/jit-test/tests/wasm/spec/spec/simd_i32x4_cmp.wast.js
--- a/js/src/jit-test/tests/wasm/spec/spec/simd_i32x4_cmp.wast.js
+++ b/js/src/jit-test/tests/wasm/spec/spec/simd_i32x4_cmp.wast.js
@@ -1,3 +1,5 @@
+// |jit-test| skip-if: !wasmSimdEnabled()
+
 /* Copyright 2021 Mozilla Foundation
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
diff --git a/js/src/jit-test/tests/wasm/spec/spec/simd_i32x4_dot_i16x8.wast.js b/js/src/jit-test/tests/wasm/spec/spec/simd_i32x4_dot_i16x8.wast.js
--- a/js/src/jit-test/tests/wasm/spec/spec/simd_i32x4_dot_i16x8.wast.js
+++ b/js/src/jit-test/tests/wasm/spec/spec/simd_i32x4_dot_i16x8.wast.js
@@ -1,3 +1,5 @@
+// |jit-test| skip-if: !wasmSimdEnabled()
+
 /* Copyright 2021 Mozilla Foundation
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
diff --git a/js/src/jit-test/tests/wasm/spec/spec/simd_i32x4_extadd_pairwise_i16x8.wast.js b/js/src/jit-test/tests/wasm/spec/spec/simd_i32x4_extadd_pairwise_i16x8.wast.js
--- a/js/src/jit-test/tests/wasm/spec/spec/simd_i32x4_extadd_pairwise_i16x8.wast.js
+++ b/js/src/jit-test/tests/wasm/spec/spec/simd_i32x4_extadd_pairwise_i16x8.wast.js
@@ -1,3 +1,5 @@
+// |jit-test| skip-if: !wasmSimdEnabled()
+
 /* Copyright 2021 Mozilla Foundation
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
diff --git a/js/src/jit-test/tests/wasm/spec/spec/simd_i32x4_extmul_i16x8.wast.js b/js/src/jit-test/tests/wasm/spec/spec/simd_i32x4_extmul_i16x8.wast.js
--- a/js/src/jit-test/tests/wasm/spec/spec/simd_i32x4_extmul_i16x8.wast.js
+++ b/js/src/jit-test/tests/wasm/spec/spec/simd_i32x4_extmul_i16x8.wast.js
@@ -1,3 +1,5 @@
+// |jit-test| skip-if: !wasmSimdEnabled()
+
 /* Copyright 2021 Mozilla Foundation
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
diff --git a/js/src/jit-test/tests/wasm/spec/spec/simd_i32x4_trunc_sat_f32x4.wast.js b/js/src/jit-test/tests/wasm/spec/spec/simd_i32x4_trunc_sat_f32x4.wast.js
--- a/js/src/jit-test/tests/wasm/spec/spec/simd_i32x4_trunc_sat_f32x4.wast.js
+++ b/js/src/jit-test/tests/wasm/spec/spec/simd_i32x4_trunc_sat_f32x4.wast.js
@@ -1,3 +1,5 @@
+// |jit-test| skip-if: !wasmSimdEnabled()
+
 /* Copyright 2021 Mozilla Foundation
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
diff --git a/js/src/jit-test/tests/wasm/spec/spec/simd_i32x4_trunc_sat_f64x2.wast.js b/js/src/jit-test/tests/wasm/spec/spec/simd_i32x4_trunc_sat_f64x2.wast.js
--- a/js/src/jit-test/tests/wasm/spec/spec/simd_i32x4_trunc_sat_f64x2.wast.js
+++ b/js/src/jit-test/tests/wasm/spec/spec/simd_i32x4_trunc_sat_f64x2.wast.js
@@ -1,3 +1,5 @@
+// |jit-test| skip-if: !wasmSimdEnabled()
+
 /* Copyright 2021 Mozilla Foundation
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
diff --git a/js/src/jit-test/tests/wasm/spec/spec/simd_i64x2_arith.wast.js b/js/src/jit-test/tests/wasm/spec/spec/simd_i64x2_arith.wast.js
--- a/js/src/jit-test/tests/wasm/spec/spec/simd_i64x2_arith.wast.js
+++ b/js/src/jit-test/tests/wasm/spec/spec/simd_i64x2_arith.wast.js
@@ -1,3 +1,5 @@
+// |jit-test| skip-if: !wasmSimdEnabled()
+
 /* Copyright 2021 Mozilla Foundation
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
diff --git a/js/src/jit-test/tests/wasm/spec/spec/simd_i64x2_arith2.wast.js b/js/src/jit-test/tests/wasm/spec/spec/simd_i64x2_arith2.wast.js
--- a/js/src/jit-test/tests/wasm/spec/spec/simd_i64x2_arith2.wast.js
+++ b/js/src/jit-test/tests/wasm/spec/spec/simd_i64x2_arith2.wast.js
@@ -1,3 +1,5 @@
+// |jit-test| skip-if: !wasmSimdEnabled()
+
 /* Copyright 2021 Mozilla Foundation
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
diff --git a/js/src/jit-test/tests/wasm/spec/spec/simd_i64x2_cmp.wast.js b/js/src/jit-test/tests/wasm/spec/spec/simd_i64x2_cmp.wast.js
--- a/js/src/jit-test/tests/wasm/spec/spec/simd_i64x2_cmp.wast.js
+++ b/js/src/jit-test/tests/wasm/spec/spec/simd_i64x2_cmp.wast.js
@@ -1,3 +1,5 @@
+// |jit-test| skip-if: !wasmSimdEnabled()
+
 /* Copyright 2021 Mozilla Foundation
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
diff --git a/js/src/jit-test/tests/wasm/spec/spec/simd_i64x2_extmul_i32x4.wast.js b/js/src/jit-test/tests/wasm/spec/spec/simd_i64x2_extmul_i32x4.wast.js
--- a/js/src/jit-test/tests/wasm/spec/spec/simd_i64x2_extmul_i32x4.wast.js
+++ b/js/src/jit-test/tests/wasm/spec/spec/simd_i64x2_extmul_i32x4.wast.js
@@ -1,3 +1,5 @@
+// |jit-test| skip-if: !wasmSimdEnabled()
+
 /* Copyright 2021 Mozilla Foundation
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
diff --git a/js/src/jit-test/tests/wasm/spec/spec/simd_i8x16_arith.wast.js b/js/src/jit-test/tests/wasm/spec/spec/simd_i8x16_arith.wast.js
--- a/js/src/jit-test/tests/wasm/spec/spec/simd_i8x16_arith.wast.js
+++ b/js/src/jit-test/tests/wasm/spec/spec/simd_i8x16_arith.wast.js
@@ -1,3 +1,5 @@
+// |jit-test| skip-if: !wasmSimdEnabled()
+
 /* Copyright 2021 Mozilla Foundation
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
diff --git a/js/src/jit-test/tests/wasm/spec/spec/simd_i8x16_arith2.wast.js b/js/src/jit-test/tests/wasm/spec/spec/simd_i8x16_arith2.wast.js
--- a/js/src/jit-test/tests/wasm/spec/spec/simd_i8x16_arith2.wast.js
+++ b/js/src/jit-test/tests/wasm/spec/spec/simd_i8x16_arith2.wast.js
@@ -1,3 +1,5 @@
+// |jit-test| skip-if: !wasmSimdEnabled()
+
 /* Copyright 2021 Mozilla Foundation
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
diff --git a/js/src/jit-test/tests/wasm/spec/spec/simd_i8x16_cmp.wast.js b/js/src/jit-test/tests/wasm/spec/spec/simd_i8x16_cmp.wast.js
--- a/js/src/jit-test/tests/wasm/spec/spec/simd_i8x16_cmp.wast.js
+++ b/js/src/jit-test/tests/wasm/spec/spec/simd_i8x16_cmp.wast.js
@@ -1,3 +1,5 @@
+// |jit-test| skip-if: !wasmSimdEnabled()
+
 /* Copyright 2021 Mozilla Foundation
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
diff --git a/js/src/jit-test/tests/wasm/spec/spec/simd_i8x16_sat_arith.wast.js b/js/src/jit-test/tests/wasm/spec/spec/simd_i8x16_sat_arith.wast.js
--- a/js/src/jit-test/tests/wasm/spec/spec/simd_i8x16_sat_arith.wast.js
+++ b/js/src/jit-test/tests/wasm/spec/spec/simd_i8x16_sat_arith.wast.js
@@ -1,3 +1,5 @@
+// |jit-test| skip-if: !wasmSimdEnabled()
+
 /* Copyright 2021 Mozilla Foundation
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
diff --git a/js/src/jit-test/tests/wasm/spec/spec/simd_int_to_int_extend.wast.js b/js/src/jit-test/tests/wasm/spec/spec/simd_int_to_int_extend.wast.js
--- a/js/src/jit-test/tests/wasm/spec/spec/simd_int_to_int_extend.wast.js
+++ b/js/src/jit-test/tests/wasm/spec/spec/simd_int_to_int_extend.wast.js
@@ -1,3 +1,5 @@
+// |jit-test| skip-if: !wasmSimdEnabled()
+
 /* Copyright 2021 Mozilla Foundation
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
diff --git a/js/src/jit-test/tests/wasm/spec/spec/simd_lane.wast.js b/js/src/jit-test/tests/wasm/spec/spec/simd_lane.wast.js
--- a/js/src/jit-test/tests/wasm/spec/spec/simd_lane.wast.js
+++ b/js/src/jit-test/tests/wasm/spec/spec/simd_lane.wast.js
@@ -1,3 +1,5 @@
+// |jit-test| skip-if: !wasmSimdEnabled()
+
 /* Copyright 2021 Mozilla Foundation
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
diff --git a/js/src/jit-test/tests/wasm/spec/spec/simd_linking.wast.js b/js/src/jit-test/tests/wasm/spec/spec/simd_linking.wast.js
--- a/js/src/jit-test/tests/wasm/spec/spec/simd_linking.wast.js
+++ b/js/src/jit-test/tests/wasm/spec/spec/simd_linking.wast.js
@@ -1,3 +1,5 @@
+// |jit-test| skip-if: !wasmSimdEnabled()
+
 /* Copyright 2021 Mozilla Foundation
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
diff --git a/js/src/jit-test/tests/wasm/spec/spec/simd_load.wast.js b/js/src/jit-test/tests/wasm/spec/spec/simd_load.wast.js
--- a/js/src/jit-test/tests/wasm/spec/spec/simd_load.wast.js
+++ b/js/src/jit-test/tests/wasm/spec/spec/simd_load.wast.js
@@ -1,3 +1,5 @@
+// |jit-test| skip-if: !wasmSimdEnabled()
+
 /* Copyright 2021 Mozilla Foundation
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
diff --git a/js/src/jit-test/tests/wasm/spec/spec/simd_load16_lane.wast.js b/js/src/jit-test/tests/wasm/spec/spec/simd_load16_lane.wast.js
--- a/js/src/jit-test/tests/wasm/spec/spec/simd_load16_lane.wast.js
+++ b/js/src/jit-test/tests/wasm/spec/spec/simd_load16_lane.wast.js
@@ -1,3 +1,5 @@
+// |jit-test| skip-if: !wasmSimdEnabled()
+
 /* Copyright 2021 Mozilla Foundation
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
diff --git a/js/src/jit-test/tests/wasm/spec/spec/simd_load32_lane.wast.js b/js/src/jit-test/tests/wasm/spec/spec/simd_load32_lane.wast.js
--- a/js/src/jit-test/tests/wasm/spec/spec/simd_load32_lane.wast.js
+++ b/js/src/jit-test/tests/wasm/spec/spec/simd_load32_lane.wast.js
@@ -1,3 +1,5 @@
+// |jit-test| skip-if: !wasmSimdEnabled()
+
 /* Copyright 2021 Mozilla Foundation
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
diff --git a/js/src/jit-test/tests/wasm/spec/spec/simd_load64_lane.wast.js b/js/src/jit-test/tests/wasm/spec/spec/simd_load64_lane.wast.js
--- a/js/src/jit-test/tests/wasm/spec/spec/simd_load64_lane.wast.js
+++ b/js/src/jit-test/tests/wasm/spec/spec/simd_load64_lane.wast.js
@@ -1,3 +1,5 @@
+// |jit-test| skip-if: !wasmSimdEnabled()
+
 /* Copyright 2021 Mozilla Foundation
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
diff --git a/js/src/jit-test/tests/wasm/spec/spec/simd_load8_lane.wast.js b/js/src/jit-test/tests/wasm/spec/spec/simd_load8_lane.wast.js
--- a/js/src/jit-test/tests/wasm/spec/spec/simd_load8_lane.wast.js
+++ b/js/src/jit-test/tests/wasm/spec/spec/simd_load8_lane.wast.js
@@ -1,3 +1,5 @@
+// |jit-test| skip-if: !wasmSimdEnabled()
+
 /* Copyright 2021 Mozilla Foundation
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
diff --git a/js/src/jit-test/tests/wasm/spec/spec/simd_load_extend.wast.js b/js/src/jit-test/tests/wasm/spec/spec/simd_load_extend.wast.js
--- a/js/src/jit-test/tests/wasm/spec/spec/simd_load_extend.wast.js
+++ b/js/src/jit-test/tests/wasm/spec/spec/simd_load_extend.wast.js
@@ -1,3 +1,5 @@
+// |jit-test| skip-if: !wasmSimdEnabled()
+
 /* Copyright 2021 Mozilla Foundation
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
diff --git a/js/src/jit-test/tests/wasm/spec/spec/simd_load_splat.wast.js b/js/src/jit-test/tests/wasm/spec/spec/simd_load_splat.wast.js
--- a/js/src/jit-test/tests/wasm/spec/spec/simd_load_splat.wast.js
+++ b/js/src/jit-test/tests/wasm/spec/spec/simd_load_splat.wast.js
@@ -1,3 +1,5 @@
+// |jit-test| skip-if: !wasmSimdEnabled()
+
 /* Copyright 2021 Mozilla Foundation
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
diff --git a/js/src/jit-test/tests/wasm/spec/spec/simd_load_zero.wast.js b/js/src/jit-test/tests/wasm/spec/spec/simd_load_zero.wast.js
--- a/js/src/jit-test/tests/wasm/spec/spec/simd_load_zero.wast.js
+++ b/js/src/jit-test/tests/wasm/spec/spec/simd_load_zero.wast.js
@@ -1,3 +1,5 @@
+// |jit-test| skip-if: !wasmSimdEnabled()
+
 /* Copyright 2021 Mozilla Foundation
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
diff --git a/js/src/jit-test/tests/wasm/spec/spec/simd_memory-multi.wast.js b/js/src/jit-test/tests/wasm/spec/spec/simd_memory-multi.wast.js
--- a/js/src/jit-test/tests/wasm/spec/spec/simd_memory-multi.wast.js
+++ b/js/src/jit-test/tests/wasm/spec/spec/simd_memory-multi.wast.js
@@ -1,3 +1,5 @@
+// |jit-test| skip-if: !wasmSimdEnabled()
+
 /* Copyright 2021 Mozilla Foundation
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
diff --git a/js/src/jit-test/tests/wasm/spec/spec/simd_select.wast.js b/js/src/jit-test/tests/wasm/spec/spec/simd_select.wast.js
--- a/js/src/jit-test/tests/wasm/spec/spec/simd_select.wast.js
+++ b/js/src/jit-test/tests/wasm/spec/spec/simd_select.wast.js
@@ -1,3 +1,5 @@
+// |jit-test| skip-if: !wasmSimdEnabled()
+
 /* Copyright 2021 Mozilla Foundation
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
diff --git a/js/src/jit-test/tests/wasm/spec/spec/simd_splat.wast.js b/js/src/jit-test/tests/wasm/spec/spec/simd_splat.wast.js
--- a/js/src/jit-test/tests/wasm/spec/spec/simd_splat.wast.js
+++ b/js/src/jit-test/tests/wasm/spec/spec/simd_splat.wast.js
@@ -1,3 +1,5 @@
+// |jit-test| skip-if: !wasmSimdEnabled()
+
 /* Copyright 2021 Mozilla Foundation
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
diff --git a/js/src/jit-test/tests/wasm/spec/spec/simd_store.wast.js b/js/src/jit-test/tests/wasm/spec/spec/simd_store.wast.js
--- a/js/src/jit-test/tests/wasm/spec/spec/simd_store.wast.js
+++ b/js/src/jit-test/tests/wasm/spec/spec/simd_store.wast.js
@@ -1,3 +1,5 @@
+// |jit-test| skip-if: !wasmSimdEnabled()
+
 /* Copyright 2021 Mozilla Foundation
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
diff --git a/js/src/jit-test/tests/wasm/spec/spec/simd_store16_lane.wast.js b/js/src/jit-test/tests/wasm/spec/spec/simd_store16_lane.wast.js
--- a/js/src/jit-test/tests/wasm/spec/spec/simd_store16_lane.wast.js
+++ b/js/src/jit-test/tests/wasm/spec/spec/simd_store16_lane.wast.js
@@ -1,3 +1,5 @@
+// |jit-test| skip-if: !wasmSimdEnabled()
+
 /* Copyright 2021 Mozilla Foundation
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
diff --git a/js/src/jit-test/tests/wasm/spec/spec/simd_store32_lane.wast.js b/js/src/jit-test/tests/wasm/spec/spec/simd_store32_lane.wast.js
--- a/js/src/jit-test/tests/wasm/spec/spec/simd_store32_lane.wast.js
+++ b/js/src/jit-test/tests/wasm/spec/spec/simd_store32_lane.wast.js
@@ -1,3 +1,5 @@
+// |jit-test| skip-if: !wasmSimdEnabled()
+
 /* Copyright 2021 Mozilla Foundation
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
diff --git a/js/src/jit-test/tests/wasm/spec/spec/simd_store64_lane.wast.js b/js/src/jit-test/tests/wasm/spec/spec/simd_store64_lane.wast.js
--- a/js/src/jit-test/tests/wasm/spec/spec/simd_store64_lane.wast.js
+++ b/js/src/jit-test/tests/wasm/spec/spec/simd_store64_lane.wast.js
@@ -1,3 +1,5 @@
+// |jit-test| skip-if: !wasmSimdEnabled()
+
 /* Copyright 2021 Mozilla Foundation
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
diff --git a/js/src/jit-test/tests/wasm/spec/spec/simd_store8_lane.wast.js b/js/src/jit-test/tests/wasm/spec/spec/simd_store8_lane.wast.js
--- a/js/src/jit-test/tests/wasm/spec/spec/simd_store8_lane.wast.js
+++ b/js/src/jit-test/tests/wasm/spec/spec/simd_store8_lane.wast.js
@@ -1,3 +1,5 @@
+// |jit-test| skip-if: !wasmSimdEnabled()
+
 /* Copyright 2021 Mozilla Foundation
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
diff --git a/js/src/jit-test/tests/wasm/spec/spec/table.wast.js b/js/src/jit-test/tests/wasm/spec/spec/table.wast.js
--- a/js/src/jit-test/tests/wasm/spec/spec/table.wast.js
+++ b/js/src/jit-test/tests/wasm/spec/spec/table.wast.js
@@ -84,17 +84,18 @@ assert_invalid(
   `size minimum must not be greater than maximum`,
 );
 
-// ./test/core/table.wast:35
-assert_invalid(() => instantiate(`(table 0x1_0000_0000 funcref) `), `table size`);
-
-// ./test/core/table.wast:39
-assert_invalid(
-  () => instantiate(`(table 0x1_0000_0000 0x1_0000_0000 funcref) `),
-  `table size`,
-);
-
-// ./test/core/table.wast:43
-assert_invalid(() => instantiate(`(table 0 0x1_0000_0000 funcref) `), `table size`);
+// Suppressed because wasm-tools cannot parse these offsets.
+// // ./test/core/table.wast:35
+// assert_invalid(() => instantiate(`(table 0x1_0000_0000 funcref) `), `table size`);
+//
+// // ./test/core/table.wast:39
+// assert_invalid(
+//   () => instantiate(`(table 0x1_0000_0000 0x1_0000_0000 funcref) `),
+//   `table size`,
+// );
+//
+// // ./test/core/table.wast:43
+// assert_invalid(() => instantiate(`(table 0 0x1_0000_0000 funcref) `), `table size`);
 
 // ./test/core/table.wast:50
 let $15 = instantiate(`(module (table i64 0 funcref))`);
diff --git a/js/src/jit-test/tests/wasm/spec/threads/LB.wast.js b/js/src/jit-test/tests/wasm/spec/threads/LB.wast.js
--- a/js/src/jit-test/tests/wasm/spec/threads/LB.wast.js
+++ b/js/src/jit-test/tests/wasm/spec/threads/LB.wast.js
@@ -21,6 +21,10 @@ let $0 = instantiate(`(module \$Mem
 )`);
 let $Mem = $0;
 
+// Missing in source test:
+// https://github.com/WebAssembly/threads/pull/217
+register($Mem, `mem`);
+
 // ./test/core/threads/LB.wast:5
 let $T1 = new Thread($Mem, "$Mem", `
 
@@ -89,7 +93,7 @@ let $3 = instantiate(`(module \$Check
     ;; allowed results: (L_0 = 0 || L_0 = 1) && (L_1 = 0 || L_1 = 1)
 
     (i32.or (i32.eq (local.get 0) (i32.const 1)) (i32.eq (local.get 0) (i32.const 0)))
-    (i32.or (i32.eq (local.get 1) (i32.const 1)) (i32.eq (local.get 0) (i32.const 0)))
+    (i32.or (i32.eq (local.get 1) (i32.const 1)) (i32.eq (local.get 1) (i32.const 0)))
     (i32.and)
     (return)
   )
diff --git a/js/src/jit-test/tests/wasm/spec/threads/LB_atomic.wast.js b/js/src/jit-test/tests/wasm/spec/threads/LB_atomic.wast.js
--- a/js/src/jit-test/tests/wasm/spec/threads/LB_atomic.wast.js
+++ b/js/src/jit-test/tests/wasm/spec/threads/LB_atomic.wast.js
@@ -21,6 +21,10 @@ let $0 = instantiate(`(module \$Mem
 )`);
 let $Mem = $0;
 
+// Missing in source test:
+// https://github.com/WebAssembly/threads/pull/217
+register($Mem, `mem`);
+
 // ./test/core/threads/LB_atomic.wast:5
 let $T1 = new Thread($Mem, "$Mem", `
 
diff --git a/js/src/jit-test/tests/wasm/spec/threads/MP.wast.js b/js/src/jit-test/tests/wasm/spec/threads/MP.wast.js
--- a/js/src/jit-test/tests/wasm/spec/threads/MP.wast.js
+++ b/js/src/jit-test/tests/wasm/spec/threads/MP.wast.js
@@ -21,6 +21,10 @@ let $0 = instantiate(`(module \$Mem
 )`);
 let $Mem = $0;
 
+// Missing in source test:
+// https://github.com/WebAssembly/threads/pull/217
+register($Mem, `mem`);
+
 // ./test/core/threads/MP.wast:5
 let $T1 = new Thread($Mem, "$Mem", `
 
@@ -86,7 +90,7 @@ let $3 = instantiate(`(module \$Check
     ;; allowed results: (L_0 = 0 || L_0 = 1) && (L_1 = 0 || L_1 = 42)
 
     (i32.or (i32.eq (local.get 0) (i32.const 1)) (i32.eq (local.get 0) (i32.const 0)))
-    (i32.or (i32.eq (local.get 1) (i32.const 42)) (i32.eq (local.get 0) (i32.const 0)))
+    (i32.or (i32.eq (local.get 1) (i32.const 42)) (i32.eq (local.get 1) (i32.const 0)))
     (i32.and)
     (return)
   )
diff --git a/js/src/jit-test/tests/wasm/spec/threads/MP_atomic.wast.js b/js/src/jit-test/tests/wasm/spec/threads/MP_atomic.wast.js
--- a/js/src/jit-test/tests/wasm/spec/threads/MP_atomic.wast.js
+++ b/js/src/jit-test/tests/wasm/spec/threads/MP_atomic.wast.js
@@ -21,6 +21,10 @@ let $0 = instantiate(`(module \$Mem
 )`);
 let $Mem = $0;
 
+// Missing in source test:
+// https://github.com/WebAssembly/threads/pull/217
+register($Mem, `mem`);
+
 // ./test/core/threads/MP_atomic.wast:5
 let $T1 = new Thread($Mem, "$Mem", `
 
diff --git a/js/src/jit-test/tests/wasm/spec/threads/MP_wait.wast.js b/js/src/jit-test/tests/wasm/spec/threads/MP_wait.wast.js
--- a/js/src/jit-test/tests/wasm/spec/threads/MP_wait.wast.js
+++ b/js/src/jit-test/tests/wasm/spec/threads/MP_wait.wast.js
@@ -21,6 +21,10 @@ let $0 = instantiate(`(module \$Mem
 )`);
 let $Mem = $0;
 
+// Missing in source test:
+// https://github.com/WebAssembly/threads/pull/217
+register($Mem, `mem`);
+
 // ./test/core/threads/MP_wait.wast:5
 let $T1 = new Thread($Mem, "$Mem", `
 
diff --git a/js/src/jit-test/tests/wasm/spec/threads/SB.wast.js b/js/src/jit-test/tests/wasm/spec/threads/SB.wast.js
--- a/js/src/jit-test/tests/wasm/spec/threads/SB.wast.js
+++ b/js/src/jit-test/tests/wasm/spec/threads/SB.wast.js
@@ -21,6 +21,10 @@ let $0 = instantiate(`(module \$Mem
 )`);
 let $Mem = $0;
 
+// Missing in source test:
+// https://github.com/WebAssembly/threads/pull/217
+register($Mem, `mem`);
+
 // ./test/core/threads/SB.wast:5
 let $T1 = new Thread($Mem, "$Mem", `
 
@@ -89,7 +93,7 @@ let $3 = instantiate(`(module \$Check
     ;; allowed results: (L_0 = 0 || L_0 = 1) && (L_1 = 0 || L_1 = 1)
 
     (i32.or (i32.eq (local.get 0) (i32.const 1)) (i32.eq (local.get 0) (i32.const 0)))
-    (i32.or (i32.eq (local.get 1) (i32.const 1)) (i32.eq (local.get 0) (i32.const 0)))
+    (i32.or (i32.eq (local.get 1) (i32.const 1)) (i32.eq (local.get 1) (i32.const 0)))
     (i32.and)
     (return)
   )
diff --git a/js/src/jit-test/tests/wasm/spec/threads/SB_atomic.wast.js b/js/src/jit-test/tests/wasm/spec/threads/SB_atomic.wast.js
--- a/js/src/jit-test/tests/wasm/spec/threads/SB_atomic.wast.js
+++ b/js/src/jit-test/tests/wasm/spec/threads/SB_atomic.wast.js
@@ -21,6 +21,10 @@ let $0 = instantiate(`(module \$Mem
 )`);
 let $Mem = $0;
 
+// Missing in source test:
+// https://github.com/WebAssembly/threads/pull/217
+register($Mem, `mem`);
+
 // ./test/core/threads/SB_atomic.wast:5
 let $T1 = new Thread($Mem, "$Mem", `
 
diff --git a/js/src/jit-test/tests/wasm/spec/spec/memory64.wast.js b/js/src/jit-test/tests/wasm/spec/spec/memory64.wast.js
index f4ff1f322215..ee773659e1ed 100644
--- a/js/src/jit-test/tests/wasm/spec/spec/memory64.wast.js
+++ b/js/src/jit-test/tests/wasm/spec/spec/memory64.wast.js
@@ -28,10 +28,10 @@ let $2 = instantiate(`(module (memory i64 1 256))`);
 let $3 = instantiate(`(module (memory i64 0 65536))`);

 // ./test/core/memory64.wast:8
-let _anon_7 = module(`(module (memory i64 0x1_0000_0000_0000))`);
+let _anon_7 = module(`(module (memory i64 137438953471))`);

 // ./test/core/memory64.wast:9
-let $4 = instantiate(`(module (memory i64 0 0x1_0000_0000_0000))`);
+let $4 = instantiate(`(module (memory i64 0 137438953471))`);

 // ./test/core/memory64.wast:11
 let $5 = instantiate(`(module (memory i64 (data)) (func (export "memsize") (result i64) (memory.size)))`);
